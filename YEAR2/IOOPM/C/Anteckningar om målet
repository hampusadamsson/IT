Kompilering: 
C  - 
kompilerar koden direkt till maskinkod. Kollar endast en fil åt gången. Detta gör att om kompilatorn inte hittar definitionen för en funktion så antar den att den finns i någon annan fil.	
(→ bättre prestanda, plattformsberoende)

Java - 
översätter koden till byte-kod som gör att koden inte är plattformsberoende. 
(→ plattformsoberoende, mycket kompakt, långsammare)

Länkning: 
C - 
vid länkning skapas en enda körbar fil av en eller flera objektfiler (o-filer) som skapas vid kompilering. Vid länkningen kan länkaren kolla på flera filer samtidigt och då hitta definitionsfel av funktioner som kompilatorn inte hittar.
En fördel med detta är att om man skriver stora program så behöver man inte kompilera om programmet varje gång man ändrar i en fil. För då har man objektfiler för all annan kod som inte har ändrats och man behöver då bara kompilera den source-filen som ändrats. 

Java- 
I  java sker länkning automatiskt.

Interpretering: 
En interpretator är ett program som utför de aktiviteter som en programtext beskriver.

C - 
måste använda ch

Java - 
Den plattformsoberoende byte-koden tolkas för den aktuella datorn i JVM:n och sedan körs koden.

JIT-kompilering: 
Just in time kompilering betyder att man kompilerar hela eller vissa delar av programmet först när det behövs. Meningen är att man ska få bättre körtid baserat på bytekod, går dock långsammare än kompilerad maskinkod.
Programmet är lagrat i minnet som bytekod och det kodsegment som just då används kompileras till maskinkod för att kunnas köras snabbare.


